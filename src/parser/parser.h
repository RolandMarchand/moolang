/*
 * Copyright (c) 2022, Roland Marchand <roland.marchand@protonmail.com>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/** \file
    The root file of the parser library.<br/>
    It declares functions related to the \ref source file's global \ref token_array.
*/

#pragma once

#include "error.h"
#include "expression.h"
#include "statement.h"
#include "statement_array.h"

#include "src/scanner/scanner.h"

#define CURRENT_LINE *CURRENT_TOKEN.line
#define CURRENT_TOKEN &parser_tokens.array[0]
#define CURRENT_TOKEN_IS(...)						\
	__TOKEN_IS__(CURRENT_TOKEN, (TokenType[]){__VA_ARGS__, -1})
/**< Variadic-length macro comparing the current token with every token given as
   an argument.<br/>
   Calls \ref \_\_TOKEN_IS\_\_().
*/

extern struct token_array parser_tokens; /**< global \ref token_array used to
					    orchestrate the rest of the library.<br/>
					    Gets manipulated by the \ref parser_advance() function.
					 */

/** The parser's main function.<br/><br/>
    __TODO__: The parser returns an expression, but it should return the root statement.<br/>
    They have not been implemented yet.
    \param S: The scanned source code and the token arrays.
    \return The program's abstract syntax tree.
*/
struct statement_array *parse(struct scan *s);

/** Advance \ref parser_tokens.
    \return Token: The \ref token that was advanced by.
*/
struct token *parser_advance();

/** Used by the variadic-length macro \ref CURRENT_TOKEN_IS.<br/>
    Do not use this function manually.

    \param Tok: \ref token to be compared.
    \param Type: \ref token's to be compared to.<br/>
    Array finishes with a non-token value, and is generated by the macro \ref
    CURRENT_TOKEN_IS.

    \return 1 if __tok__ is a token found in __type__.<br/>
    0 if __tok__ is not a token found in __type__.
*/

int __TOKEN_IS__(const struct token *tok, const TokenType type[]);
